@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model ShibpurConnectWebApp.Models.DiscussionThread
@{
    ViewBag.Title = "Feed Details";
}

<style type="text/css">    
    /*wrap the question body*/
    .detail {
        word-wrap: break-word;
    }

    /*css for questionaskedby*/
    #questionaskedby {
        background-color: #e0eaf1;
    }

    div.stat {
        color: #808080;
        font-size: 9pt;
    }

        div.stat span {
            display: inline-block;
            width: 100%;
            margin-top: 5px;
        }

    /*Reduce the well sm padding. we are using it to display who asked the question*/
    .well-sm {
        padding: 5px;
    }
    /*CSS form tags*/
    .tags {
        margin-top: 2%;
    }

    .post-tag {
        color: #566e76;
        background: #f7fdff;
        border: 1px solid #c0d4db;
        padding: .4em .5em;
        border-radius: 15px;
        text-align: center;
        font-size: 11px;
        line-height: 1;
        color: #3e6d8e;
        background-color: #e4edf4;
        margin: 2px 2px 2px 0;
        text-decoration: none;
        font-size: 12px;
        /*white-space: nowrap;*/
        display: inline-block;
        border-radius: 0;
        border: 1px solid #e4edf4;
    }

    /*CSS form the toolbas to create question*/
    #toolbar {
        height: 70px;
        margin-top: 40px;
    }

    .block {
        border-top: 1px solid #d3d4cf;
        padding-top: 20px;
        margin-bottom: 29px;
    }

    .column {
        float: left;
        width: calc(85% - 20px);
        margin-right: 20px;
    }

    div.detail {
        min-height: 65px;
    }

    div.user {
        width: 60px;
        text-align: center;
        height: 60px;
        display: block;
        float: left;
    }

        div.user a.mark-answer {
            margin-top: 6px;
            padding: 3px 6px;
        }

    .avatar {
        border-radius: 50%;
        width: 40px;
        height: 40px;
        background-color: #CCCCCA;
        cursor: pointer;
        -webkit-transition: opacity ease-in-out .25s 0s;
        -moz-transition: opacity ease-in-out .25s 0s;
        -o-transition: opacity ease-in-out .25s 0s;
        transition: opacity ease-in-out .25s 0s;
    }

    .comment-form textarea {
        /*-webkit-appearance: none;
        line-height: 20px;
        background-color: #f9faf7;
        border: 1px solid #D9DAD6;
        padding: 9px 13px;
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        resize: none;
        height: 40px;*/
        border-radius: 5px;
    }

    .button, input[type=submit] {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        padding-left: 22px;
        padding-right: 22px;
        height: 40px;
        min-width: 104px;
        border-radius: 5px;
        border: 0;
        font-weight: 700;
        color: #fcfcfa;
        background-color: #7ab21e;
    }

    .comment-form.active form textarea {
        resize: vertical;
        margin-bottom: 11px;
        min-height: 50px;
        height: 150px;
        -webkit-transition: all cubic-bezier(.2,.04,.02,1.49) .35s 0s;
        -moz-transition: all cubic-bezier(.2,.04,.02,1.49) .35s 0s;
        -o-transition: all cubic-bezier(.2,.04,.02,1.49) .35s 0s;
        transition: all cubic-bezier(.2,.04,.02,1.49) .35s 0s;
    }

    .comment-form.active input[type=submit] {
        top: inherit;
        right: 0;
        bottom: 0;
    }

    #answerlist {
        list-style-type: none;
    }

    li.answer {
        padding-bottom: 15px;
        padding-top: 15px;
        border-bottom: 1px solid #e0e0e0;
    }

        li.answer:nth-last-child(2), li.answer:last-child {
            border: none;
        }

    #answerlist li:last-child {
        padding-bottom: 0;
    }

    li.answer div.stat {
        float: right !important;
    }

    div.stat {
        color: #808080;
        font-size: 9pt;
    }

        div.stat span {
            display: inline-block;
            width: 100%;
        }

    div.answer-links {
        margin-left: 60px;
        font-size: 10pt;
    }

    span.link {
        margin-right: 20px;
    }

        span.link a {
            color: #999;
        }

            span.link a.upvote-anchor {
                box-sizing: border-box;
                transition: all ease-in-out 100ms;
                border-radius: 3px;
                box-shadow: 0 1px 1px 0 rgba(200,200,200,0.2);
                display: inline-block;
                font-weight: 500;
                outline: 0;
                padding: 3px 7px 4px 7px;
                text-align: center;
                text-decoration: none;
                cursor: pointer;
                background: #e4edf4;
                color: #3e6d8e;
                border: 1px solid #bbcadc;
            }

    .upvote-anchor span.count {
        background: 0;
        padding: 0;
        margin: 0;
        margin-left: 6px;
        padding-left: 6px;
        transition: all ease-in-out 100ms;
        position: relative;
        border-radius: 0 3px 3px 0;
        -webkit-font-smoothing: antialiased;
        color: #3e6d8e;
        font-weight: bold;
        min-width: 10px;
        text-align: center;
        display: inline-block;
        float: none;
        border-left: 1px solid #3e6d8e;
    }

    div.answer-comments {
        font-size: 13px;
        margin-left: 75px;
        margin-top: 8px;
        background: #f6f6f6;
        border: 1px solid #e2e2e2;
        border-radius: 2px;
    }

    div.comment-box {
        overflow: auto;
        padding: 5px 0;
    }

    a.commentor {
        float: left;
    }

    /* CSS for Ask to Answer*/
    hr#bigseparator {
        border-top: 3px double white;
        color: #fff;
        background-color: #fff;
        margin: 8px 0 8px 0;
        width: 90%;
    }

    hr#smallseparator {
        border-top: 1px double white;
        color: #fff;
        background-color: #fff;
        margin: 8px 0 8px 0;
        width: 90%;
    }

    .wantedanswersuggestion {
        float: left;
        width: 90%;
        margin-bottom: 12px;
    }

    .upvote-span.disabled a.upvote-anchor, .upvote-span.disabled span {
        color: #9D9C9C;
        background-color: #DBD7D7;
    }

    .no-right-padding {
        padding-right: 0;
    }

    .comment-list {
        border-bottom: 1px solid #e2e2e2;
        padding: 8px;
        margin-right: 20px;
    }

    .comment-date, .comment-user {
        font-size: 9pt;
    }

    .comment-user {
        font-weight: bold;
        padding-right: 10px;
    }

    .comment-text {
        display: inline-block;
        width: 100%;
        padding: 0 10px;
        word-wrap: break-word;
    }

    .comment-box .input-div {
        width: 70%;
        float: left;
        padding-left: 10px;
    }

    .comment-box .buttons {
        padding-left: 10px;
    }
</style>

<script type="text/javascript">
    var questionID = '';
    var askedBy = '';
    var advancedEditor;
    // we will keep the default users that can answer this question and we will retrieve it during page load
    var userListAskToAnswer;

    $(document).ready(function () {
        // hide the submit answer rich text control
        $('.wirte-answer').hide();

        // hide 'ask to answer' module
        $('#userToAnswer').hide();

        advancedEditor = new Quill('.text-wrapper .editor-container', {
            modules: {
                'authorship': {
                    authorId: 'advanced',
                    enabled: true
                },
                'toolbar': {
                    container: '.text-wrapper .toolbar-container'
                },
                'link-tooltip': true,
                'image-tooltip': true,
                'multi-cursor': true
            },
            styles: false,
            theme: 'snow'
        });


        jQuery.support.cors = true;
        var SERVER = "/api/";
        var url = window.location.href;
        var splitArr = url.split('/');
        questionID = splitArr[splitArr.length - 1];
        scAjax({
            "url": "questions/GetQuestion",
            "data": { "questionId": questionID },
            "success": function (result) {
                if (!result) {
                    return;
                }
                //debugger;
                var question = result;
                $('#details').show();
                $('.header h2').text(question.title);
                $('.header h2').append("<hr/>");
                $('.description').html(question.description.replace("<img", "<img style='max-width:730px;'"));

                var utcDate = new Date(result.postedOnUtc);
                var dateString = getMonth(utcDate.getMonth().toString()) + " " + utcDate.getDate() + ", " + utcDate.getFullYear();

                // get reputation of the user who asked this question
                var reputation;
                $.ajax({
                    url: SERVER + "profile/getuserinfo",
                    type: "GET",
                    dataType: "json",
                    data: { "userEmail": question.userEmail },
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", "Bearer UEkvwQmR0EOsdGd-9y_bqizgm7F6_qvHSy4tyeKGY9Kb93h2ASjLyvW4BdcuB9cGgt-PcACQAy7WBycNbplGPXtHI4_r4YOLjDeXcK6S4Cswk2SQ5R_51zV1cmytfczRkGM6RnRWKmH_yiIz-LPO6tByk28wkLDeeaLDnoiy6Zg6S5zk9uZZtrreZHRx3nl4SiCD3QKLtXqn7bGYGFF71D745YBAeAjNityNKpyum7pBnQSYpL5qYZHCjI3-94bT");
                    },
                    success: function (userinfo) {
                        if (!userinfo) {
                            return;
                        }
                        $('#questionaskedby').show();
                        $('#questionaskedby').append("<div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='" + question.userProfileImage + "'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='questionaskedbyuser' style='margin-left:15px;font-size:13px;' userid='" + userinfo.userId + "'href='/Account/Profile?useremail=" + question.userEmail + "'>" + question.displayName + "</a></span><br/><span style='margin-left:15px;font-size:10px'>reputation: " + userinfo.reputationCount + "</span></div><div class='stat'><span class='date'>asked: " + dateString + "</span></div>");
                    }
                });
                //$('#questionaskedby').append("Asked By: <a href='" + window.location.origin + "/Account/Profile?useremail=" + question.userEmail + "'>" + question.displayName + "</a>");

                askedBy = question.userEmail;
                getAnswers();
                // attach the categories
                $(question.categories).each(function (i, category) {
                    var tagAnchor = $('<a>').addClass('post-tag').text(category).attr('href', "/Feed/FeedByCategory/" + category);
                    $('div.tags').append(tagAnchor);
                });

                // show the suggested user who can answer this question using elastic search
                scAjax({
                    "url": "search/SearchAllTypes",
                    "data": { "searchTerm": result.categories.toString() },
                    "success": function (result) {
                        if (!result) {
                            return;
                        }

                        userListAskToAnswer = result;

                        if (result.length == 0) {
                            $('#userlistasktoanswer').append("<span>Sorry no matching profile available</span>");
                            // hide the loading message
                            $('#loadingasktoanswer').hide();
                        }
                        else {
                            // update the div with the user data received from the API
                            jQuery.each(result, function (i, val) {
                                // check if this user already requested to answer this question, if that true then keep the 'Ask' button disabled
                                scAjax({
                                    "url": "asktoanswer/GetAskToAnswer",
                                    "data": { "questionId": questionID, "userId": val.userInfo.userId },
                                    "success": function (result) {
                                        //get the response rate for each user
                                        var responseRate;
                                        scAjax({
                                            "url": "asktoanswer/GetResponseRate",
                                            "data": { "userId": val.userInfo.userId },
                                            "success": function (rRate) {

                                                responseRate = rRate;
                                                if (result == null) {
                                                    $('#userlistasktoanswer').append("<div class='wantedanswersuggestion'><div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='/Content/images/profile-image.jpg'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='userName' style='margin-left:15px;' href='/Account/Profile?useremail=" + val.userInfo.email + "'>" + val.userInfo.firstName + " " + val.userInfo.lastName + "</a></span><br/><span style='margin-left:15px;font-size:12px'>Response rate: " + responseRate + "</span></div><a id='askmeto' data-id='" + val.userInfo.userId + "' data-email='" + val.userInfo.email + "' class='btn btn-primary btn-sm' style='float:right;' onclick='SendNotification(this)'>Ask</a></div><hr id='smallseparator'/>")
                                                }
                                                else
                                                    $('#userlistasktoanswer').append("<div class='wantedanswersuggestion'><div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='/Content/images/profile-image.jpg'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='userName' style='margin-left:15px;' href='/Account/Profile?useremail=" + val.userInfo.email + "'>" + val.userInfo.firstName + " " + val.userInfo.lastName + "</a></span><br/><span style='margin-left:15px;font-size:12px'>Response rate: " + responseRate + "</span></div><a id='askmeto' data-id='" + val.userInfo.userId + "' data-email='" + val.userInfo.email + "' class='btn btn-primary btn-sm' disabled='disabled' style='float:right;' onclick='SendNotification(this)'>Already Asked</a></div><hr id='smallseparator'/>")

                                                // hide the loading message
                                                $('#loadingasktoanswer').hide();
                                            }
                                        });
                                    }
                                });

                            });
                        }
                    },
                    "error": function (XMLHttpRequest, textStatus, errorThrown) {
                        var errorText = XMLHttpRequest.responseText.replace('{"message":"', " ").replace('"}', " ");
                        //$("#errorLabel").text(errorText);
                        $('#failuremessage').css('display', 'block');
                        $('#failuremessage').text(errorText);

                        // hide the loading message
                        $('#loadingasktoanswer').hide();
                    }
                });
            }
        });

        scAjax({
            "url": "questions/IncrementViewCount",
            "type": "POST",
            "data": JSON.stringify({ "QuestionID": questionID }),
            "success": function (result) {
            }
        });

        //getAnswers();

        $('.btn-submit-answer').click(function () {
            saveAnswer();
        });

        $('textarea').focus(function () {
            var textarea = $(this);
            $('.comment-form').addClass('active');
            var parentDiv = $(textarea).parent();
            $(parentDiv).removeClass("col-md-8").addClass("col-md-12");
            //$(parentDiv).next().addClass("col-md-offset-9");
        });

        // add the rich text answer plugin
        $('.textarea').wysihtml5({
            toolbar: {
                "image": false
            }
        });
    });

    // function to send notification to the specific user from 'Ask to Answer' module
    function SendNotification(elm) {
        // retrieve current logged-in user details
        var userDetails = localStorage.getItem("SC_Session_UserDetails");
        if (!userDetails) {
            //TO-DO: Handle if userdetail is not available in Session Storage
            return;
        }
        var userInfo = $.parseJSON(userDetails);

        // send email notification
        var emaildata = {
            "Body": "<a href='" + window.location.origin + "/Account/Profile?useremail=" + userInfo.email + "'>" + userInfo.firstName + " " + userInfo.lastName + "</a>" + " requested you to answer <a href='" + window.location.href + "'>" + $('#questiontitle').text() + "</a>",
            "EmailAddress": elm.attributes["data-email"].value,
            "Subject": "ShibpurConnect: Can you answer this question?"
        };

        scAjax({
            "url": "emails/sendemail",
            "type": "POST",
            "data": JSON.stringify(emaildata, null, 2),
            "success": function (result) {
            }
        });

        // save this request in the Notification collection
        var notificationContent = {
            "askedBy": userInfo.email,
            "displayName": userInfo.firstName + " " + userInfo.lastName,
            "questionId": questionID,
            "questionTitle": $('#questiontitle').text()
        };
        var data = {
            "UserId": elm.attributes["data-id"].value,
            "NotificationContent": JSON.stringify(notificationContent),
            "NotificationType": "AskToAnswer"
        };

        scAjax({
            "url": "notifications/PostNotification",
            "type": "POST",
            "data": JSON.stringify(data, null, 2),
            "success": function (result) {
                // disable the Ask button and change the test to Asked
                $(elm).text("Asked");
                $(elm).attr("disabled", "disabled");

                // save this 'ask to answer' record in database collection
                var asktoanswer = {
                    "AskedTo": elm.attributes["data-id"].value,
                    "AskedBy": userInfo.userId,
                    "QuestionId": questionID
                };
                scAjax({
                    "url": "asktoanswer/postasktoanswer",
                    "type": "POST",
                    "data": JSON.stringify(asktoanswer, null, 2),
                    "success": function (result) {

                    }
                });
            }
        });
    }

    // function to send notification when someone will post a new answer
    function NotificationForNewAnswer() {
        // retrieve current logged-in user details
        var userDetails = localStorage.getItem("SC_Session_UserDetails");
        if (!userDetails) {
            //TO-DO: Handle if userdetail is not available in Session Storage
            return;
        }
        var userInfo = $.parseJSON(userDetails);

        // retrieve email of the user who asked this question
        var emailToSend = $('.questionaskedbyuser').attr("href").substring($('.questionaskedbyuser').attr("href").indexOf("=") + 1);

        // send email notification if the user who posted the answer and user who asked this question are different
        if (emailToSend.toLowerCase() != userInfo.email.toLowerCase()) {
            // send email notification
            var emaildata = {
                "Body": "<a href='" + window.location.origin + "/Account/Profile?useremail=" + userInfo.email + "'>" + userInfo.firstName + " " + userInfo.lastName + "</a>" + " wrote an answer to your question <a href='" + window.location.href + "'>" + $('#questiontitle').text() + "</a>",
                "EmailAddress": emailToSend,
                "Subject": "ShibpurConnect: New answer in your question"
            };

            scAjax({
                "url": "emails/sendemail",
                "type": "POST",
                "data": JSON.stringify(emaildata, null, 2),
                "success": function (result) {
                }
            });

            // save this request in the Notification collection
            var notificationContent = {
                "answeredBy": userInfo.email,
                "displayName": userInfo.firstName + " " + userInfo.lastName,
                "questionId": questionID,
                "questionTitle": $('#questiontitle').text()
            };
            var data = {
                "UserId": $('.questionaskedbyuser').attr("userId"),
                "NotificationContent": JSON.stringify(notificationContent),
                "NotificationType": "ReceivedAnswer"
            };

            scAjax({
                "url": "notifications/PostNotification",
                "type": "POST",
                "data": JSON.stringify(data, null, 2),
                "success": function (result) {

                }
            });
        }
    }

    // this will trigger when someone will add new comment, to send notification to the user who posted the answer
    function NotificationForNewComment(email, notificationToSend) {
        // retrieve current logged-in user details
        var userDetails = localStorage.getItem("SC_Session_UserDetails");
        if (!userDetails) {
            //TO-DO: Handle if userdetail is not available in Session Storage
            return;
        }
        var userInfo = $.parseJSON(userDetails);

        // send email notification if the user who posted the comment and user who answered it are different
        if (email.toLowerCase() != userInfo.email.toLowerCase()) {
            // send email notification
            var emaildata = {
                "Body": "<a href='" + window.location.origin + "/Account/Profile?useremail=" + userInfo.email + "'>" + userInfo.firstName + " " + userInfo.lastName + "</a>" + " posted a comment to your answer in question <a href='" + window.location.href + "'>" + $('#questiontitle').text() + "</a>",
                "EmailAddress": email,
                "Subject": "ShibpurConnect: New comment to your answer"
            };

            scAjax({
                "url": "emails/sendemail",
                "type": "POST",
                "data": JSON.stringify(emaildata, null, 2),
                "success": function (result) {
                }
            });

            //save this request in the Notification collection
            var notificationContent = {
                "commentedBy": userInfo.email,
                "displayName": userInfo.firstName + " " + userInfo.lastName,
                "questionId": questionID,
                "questionTitle": $('#questiontitle').text()
            };
            var data = {
                "UserId": notificationToSend,
                "NotificationContent": JSON.stringify(notificationContent),
                "NotificationType": "ReceivedComment"
            };

            scAjax({
                "url": "notifications/PostNotification",
                "type": "POST",
                "data": JSON.stringify(data, null, 2),
                "success": function (result) {

                }
            });
        }
    }    

    function saveAnswer() {
        // hide the error div
        $('#errormessage').empty();
        $('#errormessage').hide();

        // disable the button
        $('.btn-submit-answer').prop('disabled', true);

        // add spinner animation in the save button and change the text to 'Saving..'
        $('.btn-submit-answer > i').addClass('fa fa-circle-o-notch fa-spin');
        $('.btn-submit-answer > span').text(' Saving...');

        jQuery.support.cors = true;
        var userDetails = localStorage.getItem("SC_Session_UserDetails");

        if (!userDetails) {
            //TO-DO: Handle if userdetail is not available in Session Storage
            return;
        }

        var answer = advancedEditor.getHTML();

        // verify if answer text is empty
        if (!answer || $.trim(advancedEditor.getText()) == "") {
            // enable the button
            $('.btn-submit-answer').prop('disabled', false);

            // remove the loading class from save button
            $('.btn-submit-answer > i').removeClass('fa fa-circle-o-notch fa-spin');
            $('.btn-submit-answer > span').text('Submit Answer');

            // parse the error json   
            $('#errormessage').show();
            $('#errormessage').append("<p>Answer can't be blank</p>");

            return;
        }
        // verify whether length of answer text is less than 30
        if ($.trim(advancedEditor.getText()).length < 30) {
            // enable the button
            $('.btn-submit-answer').prop('disabled', false);

            // remove the loading class from save button
            $('.btn-submit-answer > i').removeClass('fa fa-circle-o-notch fa-spin');
            $('.btn-submit-answer > span').text('Submit Answer');

            // toastr error notification
            Command: toastr["error"]("Answer should be more than 30 characters long")           
            return;
        }

        var userInfo = $.parseJSON(userDetails);

        //var SERVER = "/api/";
        var userid = userInfo.userId;

        //var token = localStorage.getItem("TOKEN") || "PTLp2jwqIgLZmDBqjtADmHdtHmKpEmy-KtrdrocIBR5dz2k0uHNdgLdeqm6bFODmjUxsgNkcr0LI2UGaT6xve1gxPaHjLAyqneD69pKNIVwpo6mGtiaemzfJFVgV_FS_Q6TzA5InNb16tGCu3VNoYdqQEJu-jLiX3uN3FNAjAUKElpYZbjk5fYZ7ZKZ3T0w7utu0rbNI2BWuxo4HADZ4wrvI1J_-8qnd4Sq1kYWBkdPFeqDO2HQ8Io-IiKSDmnFS";
        var answerObject = { "AnswerText": answer, "QuestionId": questionID, "UserId": userid, "DisplayName": userInfo.firstName, "UserEmail": userInfo.email, "UserProfileImage": userInfo.profileImageURL };

        advancedEditor.setHTML("");
        scAjax({
            "url": "Answers/PostAnswer",
            "type": "POST",
            "data": JSON.stringify(answerObject),
            "success": function (result, data) {
                if (!result) {
                    return;
                }

                // enable the button
                $('.btn-submit-answer').prop('disabled', false);

                // remove the loading class from save button
                $('.btn-submit-answer > i').removeClass('fa fa-circle-o-notch fa-spin');
                $('.btn-submit-answer > span').text('Submit Answer');

                // send notification to the user who asked this question..that there is a new answer for your question
                NotificationForNewAnswer();

                //update the asktoanswer collection if this user has been asked to answer this question
                scAjax({
                    "url": "asktoanswer/GetAskToAnswer",
                    "data": { "questionId": questionID, "userId": userInfo.userId },
                    "success": function (result) {
                        if (result != null) {
                            if (result.hasAnswered == false) {
                                // mark that the user has answered this question
                                var asktoanswer = {
                                    "Id": result.id,
                                    "AskedTo": userInfo.userId,
                                    "AskedBy": result.askedBy,
                                    "QuestionId": result.questionId,
                                    "HasAnswered": true,
                                    "AskedOnUtc": result.askedOnUtc
                                };
                                scAjax({
                                    "url": "asktoanswer/postasktoanswer",
                                    "type": "POST",
                                    "data": JSON.stringify(asktoanswer, null, 2),
                                    "success": function (result) {

                                    }
                                });
                            }
                        }
                    }
                });

                var utcDate = new Date(result.postedOnUtc);
                var dateString = getMonth(utcDate.getMonth().toString()) + " " + utcDate.getDate() + ", " + utcDate.getFullYear() + "at"+ utcDate.getHours() + ":" + utcDate.getMinutes();

                var answerBlock = $('#answerlist li.answer.hide').clone();
                $(answerBlock).removeClass('hide');
                // add fixed width if user add any image as part of the answer
                $(answerBlock).find('.text').html(result.answerText.replace("<img", "<img style='max-width:530px;'"));
                $(answerBlock).find('.userName').text(result.displayName);
                $(answerBlock).find('.date').text(dateString);
                $(answerBlock).find('.upvote-span').addClass('disabled');
                $(answerBlock).find('.answer-comments .add-comment').hide();

                var userNameAnchor = $(answerBlock).find('div.user a.userName');
                $(userNameAnchor).text(result.displayName);
                if (result.userProfileImage) {
                    var userProfileImage = $(answerBlock).find('div.user img.avatar');
                    $(userProfileImage).attr('src', result.userProfileImage);
                }
                if (result.userEmail != null) {
                    var url = $(userNameAnchor).attr('href') + '?userEmail=' + result.userEmail;
                    $(userNameAnchor).attr('href', url);
                }

                $('#answerlist').append(answerBlock);
                $('.textarea').val('');
                logActivity(2, result.answerId);

                $('.anchor-add-comment').unbind("click").bind("click", handleAddComment);
                $('.anchor-cancel-comment').unbind('click').bind('click', handleCancelComment);
                $('.btn-save-comment').unbind("click").bind("click", handleSaveComment);
            },
            "error": function (XMLHttpRequest, textStatus, errorThrown) {
                var errorText = XMLHttpRequest.responseText.replace('{"message":"', " ").replace('"}', " ");
                $("#errorLabel").text(errorText);

                // enable the button
                $('.btn-submit-answer').prop('disabled', false);

                // remove the loading class from save button
                $('.btn-submit-answer > i').removeClass('fa fa-circle-o-notch fa-spin');
                $('.btn-submit-answer > span').text('Submit Answer');

                // parse the error json
                var errorresponse = jQuery.parseJSON(XMLHttpRequest.responseText);
                $('#errormessage').show();
                $('#errormessage').append("<p>" + errorresponse.modelState['answer.AnswerText'][0] + "</p>");
            }
        });

    }

    function getComments(answerBlock, answer, userEmail) {
        if (!answerBlock) {
            return;
        }

        var answerId = answer.answerId;
        scAjax({
            "url": "comments/GetCommentsForAnswer",
            "data": { "answerId": answerId },
            "success": function (result) {
                if (!result) {
                    return;
                }

                // hide the loading symbol for the answers
                $('#loadinganswers').hide();

                // show the submit answer rich text control
                $('.wirte-answer').show();

                // show the 'ask to answer module'
                $('#userToAnswer').show();                

                if (result.length == 0) {
                    $(answerBlock).find('.answer-comments').hide();
                }

                $(result.reverse()).each(function (i, e) {

                    var commentBlock = $(answerBlock).find('.answer-comments .comment-list.hide').clone();
                    $(commentBlock).removeClass('hide');
                    $(commentBlock).find('.comment-text').text(e.commentText);
                    $(commentBlock).find('.comment-date').text(getDateFormatted(e.postedOnUtc));
                    $(commentBlock).find('.comment-user').text(e.displayName);
                    answerBlock.find('.answer-comments').prepend(commentBlock);
                });

                //setUpAnswerUserActions();
            }
        });
    }

    function handleAddComment(event) {
        event.preventDefault();
        var anchor = $(event.target);

        var commentBox = $(anchor).closest('.add-comment').siblings('.comment-box');
        $(commentBox).show();
        $(commentBox).find('input[type=text]').focus();
        $(anchor).parent().hide();
    }

    function handleCommentLinkClick(event) {
        event.preventDefault();
        var anchor = $(this);
        var commentBox = $(anchor).closest('.answer-links').siblings('.answer-comments');
        $(commentBox).slideToggle();
        if ($(commentBox).find('.comment-list').length == 1) {
            $(commentBox).find('.add-comment .anchor-add-comment').hide();
            $(commentBox).find('.comment-box').show();
        }
    }

    function handleSaveComment(event) {      

        // disable the button
        $('.btn-save-comment').prop('disabled', true);

        // add spinner animation in the save button and change the text to 'Saving..'
        $('.btn-save-comment > i').addClass('fa fa-circle-o-notch fa-spin');
        $('.btn-save-comment > span').text(' Saving...');

        var button = $(event.target);
        var commentBox = $(button).closest('.comment-box');
        var input = $(commentBox).find('.txt_comment');
                
        if (commentBox.hasClass("has-error")) {
            commentBox.removeClass("has-error");
        }
        var comment = $(input).val();
        // take user comment as placeholder text
        input.attr("placeholder", comment);
        if (!comment) {
            if (!commentBox.hasClass("has-error")) {
                commentBox.addClass("has-error");
            }
            input.attr("placeholder", "Comment can't be blank");
            
            // enable the button 
            $('.btn-save-comment').prop('disabled', false);

            // remove the loading class from save button
            $('.btn-save-comment > i').removeClass('fa fa-circle-o-notch fa-spin');
            $('.btn-save-comment > span').text('Save');

            return;
        }

        var userDetails = localStorage.getItem("SC_Session_UserDetails");
        if (!userDetails) {
            //TO-DO: Handle if userdetail is not available in Session Storage
            return;
        }
        var userInfo = $.parseJSON(userDetails);
        var userId = userInfo.userId;

        var answerId = $(button).closest('li.answer').attr('data-answerid');
        var data = { "CommentText": $.trim(comment), "UserId": userId, "DisplayName": userInfo.firstName, "AnswerId": answerId };
        $(input).val('');
        scAjax({
            "url": "comments/AddComment",
            "type": "POST",
            "data": JSON.stringify(data, null, 2),
            "success": function (result) {
                // enable the button
                $('.btn-save-comment').prop('disabled', false);
                // remove the loading class from save button
                $('.btn-save-comment > i').removeClass('fa fa-circle-o-notch fa-spin');
                $('.btn-save-comment > span').text('Save');

                // reset commentbox placeholder
                input.attr("placeholder", "Add Comment");

                var answerBlock = $(button).closest('li.answer');
                var commentBlock = $(answerBlock).find('.answer-comments .comment-list.hide').clone();
                $(commentBlock).removeClass('hide');
                $(commentBlock).find('.comment-text').text(comment);
                $(commentBlock).find('.comment-date').text(getDateFormatted(result.postedOnUtc));
                $(commentBlock).find('.comment-user').text(result.displayName);
                //$(answerBlock).find('.answer-comments').append(commentBlock);
                commentBlock.insertBefore(answerBlock.find('.answer-comments').find('.comment-box'));
               
                // retrieve email of the user who posted the answer
                var emailToSend = $(answerBlock).find('.user').find('a.userName').attr("href").substring($(answerBlock).find('.user').find('a.userName').attr("href").indexOf("=") + 1);
                var notificationToSend = $(answerBlock).attr("data-answerby");
                NotificationForNewComment(emailToSend, notificationToSend);
            },
            "error": function (err) {
                // parse the error json
                var errorresponse = jQuery.parseJSON(err.responseText);

                // enable the button 
                $('.btn-save-comment').prop('disabled', false);

                // remove the loading class from save button
                $('.btn-save-comment > i').removeClass('fa fa-circle-o-notch fa-spin');
                $('.btn-save-comment > span').text('Save');

               // check if comment box has the 'has-error' class or not
                if (!commentBox.hasClass("has-error")) {
                    commentBox.addClass("has-error");
                }
                input.attr("placeholder", errorresponse.modelState['comment.CommentText'][0]);               
            }
        });
    }

    function handleUpvote(event) {
        event.preventDefault();
        var anchor = $(event.target);
        if ($(anchor).parent().hasClass('disabled')) {
            return false;
        }
        var answerId = $(anchor).closest('li.answer').attr('data-answerid');
        var answerBy = $(anchor).closest('li.answer').attr('data-answerBy');
        logActivity(3, answerId, answerBy);

        scAjax({
            "url": "answers/UpdateUpVoteCount",
            "type": "POST",
            "data": JSON.stringify({
                "AnswerID": answerId, "UserEmail": userInfo.email
            }),
            "success": function (result) {
                $(anchor).find('.count').text(result);
                $(anchor).parent().addClass('disabled');
            }
        });
    }

    function handleCancelComment(event) {
        event.preventDefault();
        var anchor = $(event.target);
        var commentBox = $(anchor).closest('.comment-box');
        $(commentBox).hide();
        $(commentBox).siblings('.add-comment').show();       
    }

    function setUpAnswerUserActions() {
        $('.comment-anchor').unbind("click").bind("click", handleCommentLinkClick);

        $('.anchor-add-comment').unbind("click").bind("click", handleAddComment);

        $('.anchor-cancel-comment').unbind('click').bind('click', handleCancelComment);

        $('.btn-save-comment').unbind("click").bind("click", handleSaveComment);

        $('.upvote-anchor').unbind("click").bind("click", handleUpvote);
    }

    function createAnswerHtml(answerBlock, answer, userEmail) {
        $(answerBlock).removeClass('hide').attr({ 'data-answerid': answer.answerId, 'data-answerBy': answer.userId });
        // set a max width for any image that is part of the answer
        $(answerBlock).find('.text').html(answer.answerText.replace("<img", "<img style='max-width:530px;'"));
        $(answerBlock).find('.upvote-anchor .count').text(answer.upVoteCount);
        if (answer.upvotedBy && answer.upvotedBy.indexOf(userEmail) >= 0) {
            $(answerBlock).find('.upvote-span').addClass('disabled');
        }
        //$(answerBlock).find('.userName').text(answer.displayName);

        $(answerBlock).find('.answer-comments .comment-box').hide();

        var userNameAnchor = $(answerBlock).find('div.user a.userName');
        $(userNameAnchor).text(answer.displayName);
        if (answer.userProfileImage) {
            var userProfileImage = $(answerBlock).find('div.user img.avatar');
            $(userProfileImage).attr('src', answer.userProfileImage);
        }
        if (answer.userEmail != null) {
            var url = $(userNameAnchor).attr('href') + '?userEmail=' + answer.userEmail;
            $(userNameAnchor).attr('href', url);
        }

        var utcDate = new Date(answer.postedOnUtc);
        var dateString = getDateFormatted(answer.postedOnUtc);
        $(answerBlock).find('.date').text(dateString);

        if (answer.markedAsAnswer) {
            $(answerBlock).find('.mark-answer').removeClass('hide').addClass('btn-success');
        }

        $('#answerlist').append(answerBlock);
    }

    function getAnswers() {
        var isAskedByMe = false;
        var userDetails = localStorage.getItem("SC_Session_UserDetails");
        if (userDetails) {
            var userInfo = $.parseJSON(userDetails);
            isAskedByMe = askedBy == userInfo.email;
        }        

        jQuery.support.cors = true;
        var SERVER = "/api/";

        scAjax({
            "url": "answers/GetAnswers",
            "data": { "questionId": questionID },
            "success": function (result) {
                if (!result) {
                    return;
                }

                $('#answerlist').before("<h4>Answers:</h4><hr/>");
                var save = $('#answerlist .answer.hide').detach();
                $('#answerlist').empty().append(save);

                $(result).each(function (index, answer) {
                    var answerBlock = $('#answerlist li.answer.hide').clone();
                    createAnswerHtml(answerBlock, answer, userInfo.email);
                    if (isAskedByMe) {
                        var markAnswer = $(answerBlock).find('.mark-answer');
                        $(markAnswer).removeClass('hide').click(function () {
                            var span = $(this);
                            if ($(span).hasClass('btn-success')) {
                                return;
                            }

                            var answerId = $(span).closest('li.answer').attr('data-answerid');
                            var answerBy = $(span).closest('li.answer').attr('data-answerBy');
                            var answers = [];
                            answers.push({ "AnswerID": answerId, "MarkedAsAnswer": true });
                            $('.mark-answer.btn-success').each(function (i, e) {
                                $(e).removeClass('btn-success');
                                var oldAnswerId = $(e).closest('li.answer').attr('data-answerid');
                                answers.push({ "AnswerID": oldAnswerId, "MarkedAsAnswer": false });
                            });

                            $(span).addClass('btn-success');
                            logActivity(5, answerId, answerBy);

                            scAjax({
                                "url": "answers/UpdateMarkAsAnswer",
                                "type": "POST",
                                "data": JSON.stringify(answers)
                            });
                        });
                    }

                    getComments(answerBlock, answer, userInfo.email);
                    setUpAnswerUserActions();
                });

            },
            "error": function (err) {
                // hide the loading symbol for the answers
                $('#loadinganswers').hide();

                // show the submit answer rich text control
                $('.wirte-answer').show();

                // show the 'ask to answer module'
                $('#userToAnswer').show();
            }
        });
    }

    // This method will execute when user will type user details in the 'Ask To Answer' serach box
    var lastentry = "";
    var xhrCount = 0;
    $(function () {
        $('#usernametext').keyup(function (event) {
            // clear the previous users
            $('#userlistasktoanswer').empty();

            // sequence number for the current invocation of function
            var seqNumber = ++xhrCount;

            jQuery.support.cors = true;
            var SERVER = "/api/";
            // enable loading div
            $('#loadingasktoanswer').show();

            if ($('#usernametext').val() != "") {
                scAjax({
                    "url": "search/SearchUsersByNameEmail",
                    "data": { "userDetails": $('#usernametext').val() },
                    "success": function (result) {
                        if (!result) {
                            return;
                        }
                        if (seqNumber === xhrCount) {

                            // if no user found then show this message
                            if (result.length == 0) {
                                $('#userlistasktoanswer').append("<span>No user found</span>");
                                // hide the loading
                                $('#loadingasktoanswer').hide();
                                return;
                            }
                            else {
                                // update the div with the user data received from the API
                                jQuery.each(result, function (i, val) {
                                    // check if this user already requested to answer this question, if that true then keep the 'Ask' button disabled
                                    scAjax({
                                        "url": "asktoanswer/GetAskToAnswer",
                                        "data": { "questionId": questionID, "userId": val.userId },
                                        "success": function (result) {
                                            //get the response rate for each user
                                            var responseRate;
                                            scAjax({
                                                "url": "asktoanswer/GetResponseRate",
                                                "data": { "userId": val.userId },
                                                "success": function (rRate) {

                                                    responseRate = rRate;
                                                    if (result == null) {
                                                        $('#userlistasktoanswer').append("<div class='wantedanswersuggestion'><div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='/Content/images/profile-image.jpg'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='userName' style='margin-left:15px;' href='/Account/Profile?useremail=" + val.email + "'>" + val.firstName + " " + val.lastName + "</a></span><br/><span style='margin-left:15px;font-size:12px'>Response rate: " + responseRate + "</span></div><a id='askmeto' data-id='" + val.userId + "' data-email='" + val.email + "' class='btn btn-primary btn-sm' style='float:right;' onclick='SendNotification(this)'>Ask</a></div><hr id='smallseparator'/>")
                                                    }
                                                    else
                                                        $('#userlistasktoanswer').append("<div class='wantedanswersuggestion'><div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='/Content/images/profile-image.jpg'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='userName' style='margin-left:15px;' href='/Account/Profile?useremail=" + val.email + "'>" + val.firstName + " " + val.lastName + "</a></span><br/><span style='margin-left:15px;font-size:12px'>Response rate: " + responseRate + "</span></div><a id='askmeto' data-id='" + val.userId + "' data-email='" + val.email + "' class='btn btn-primary btn-sm' disabled='disabled' style='float:right;' onclick='SendNotification(this)'>Already Asked</a></div><hr id='smallseparator'/>")

                                                    // hide the loading message
                                                    $('#loadingasktoanswer').hide();
                                                }
                                            });
                                        }
                                    });

                                });
                            }

                        }
                    }
                });
            }
            else {
                // clear the previous users
                $('#userlistasktoanswer').empty();

                if (userListAskToAnswer.length == 0) {
                    $('#userlistasktoanswer').append("<span>Sorry no matching profile available</span>");
                    // hide the loading message
                    $('#loadingasktoanswer').hide();
                }
                else {
                    // update the div with the user data received from the API
                    jQuery.each(userListAskToAnswer, function (i, val) {
                        // check if this user already requested to answer this question, if that true then keep the 'Ask' button disabled
                        scAjax({
                            "url": "asktoanswer/GetAskToAnswer",
                            "data": { "questionId": questionID, "userId": val.userInfo.userId },
                            "success": function (result) {
                                //get the response rate for each user
                                var responseRate;
                                scAjax({
                                    "url": "asktoanswer/GetResponseRate",
                                    "data": { "userId": val.userInfo.userId },
                                    "success": function (rRate) {

                                        responseRate = rRate;
                                        if (result == null) {
                                            $('#userlistasktoanswer').append("<div class='wantedanswersuggestion'><div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='/Content/images/profile-image.jpg'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='userName' style='margin-left:15px;' href='/Account/Profile?useremail=" + val.userInfo.email + "'>" + val.userInfo.firstName + " " + val.userInfo.lastName + "</a></span><br/><span style='margin-left:15px;font-size:12px'>Response rate: " + responseRate + "</span></div><a id='askmeto' data-id='" + val.userInfo.userId + "' data-email='" + val.userInfo.email + "' class='btn btn-primary btn-sm' style='float:right;' onclick='SendNotification(this)'>Ask</a></div><hr id='smallseparator'/>")
                                        }
                                        else
                                            $('#userlistasktoanswer').append("<div class='wantedanswersuggestion'><div class='profileimage' style='float:left;'><img class='avatar' width='60' height='60' src='/Content/images/profile-image.jpg'></img></div><div class='userinfo' style='float:left;'><span class='name'><a class='userName' style='margin-left:15px;' href='/Account/Profile?useremail=" + val.userInfo.email + "'>" + val.userInfo.firstName + " " + val.userInfo.lastName + "</a></span><br/><span style='margin-left:15px;font-size:12px'>Response rate: " + responseRate + "</span></div><a id='askmeto' data-id='" + val.userInfo.userId + "' data-email='" + val.userInfo.email + "' class='btn btn-primary btn-sm' disabled='disabled' style='float:right;' onclick='SendNotification(this)'>Already Asked</a></div><hr id='smallseparator'/>")

                                        // hide the loading message
                                        $('#loadingasktoanswer').hide();
                                    }
                                });
                            }
                        });

                    });
                }
            }
        });
    });
</script>



<div class="container">
    <div class="col-md-8">
        <div class="header col-md-12">
            <h2 style="font-size:22px;" id="questiontitle"></h2>
        </div>
    </div>
    <div class="col-md-8">
        <div class="row">
            <div id="details" style="display:none">
                <div class="col-md-10">
                    <div class="description col-md-12">                        
                    </div>
                    <div class="tags col-md-10">
                    </div>
                    <div class="stat col-md-2">
                        <span class="date"></span>
                        <span class="answercount"></span>
                    </div>
                    <div id="questionaskedby" class="well-sm" style="float:right;display:none;"></div>
                </div>
            </div>

            <br /><br />
            <div id="moduleanswers" class="col-md-12">
                @*<h4>Answers:</h4><hr />*@
                <ul id="answerlist">
                    <!--div for loading message for the Answers list-->
                    <div id="loadinganswers" class="center-block col-md-4" style="float:none;margin-left:300px;margin-top:200px;">
                        <i class="fa fa-spinner fa-spin fa-3x"></i>
                    </div>
                    @*<div id="answerdiv">*@
                    <li class="hide answer col-md-12">
                        <div class="user">
                            <img class="avatar" width="40" height="40" src="/Content/images/profile-image.jpg">
                            <a class="userName" href="\Account\Profile"></a>
                            <a class="btn btn-default btn-sm mark-answer hide" title="Mark as answer">
                                <i class="fa fa-check-square-o fa-lg"></i>
                            </a>
                        </div>
                        <div class="detail col-md-10">
                            <div class="text">
                            </div>
                            <div class="stat col-md-4">
                                <span class="date"></span>
                            </div>
                        </div>
                        <div class="answer-links col-md-10">
                            <span class="link upvote-span">
                                <a class="upvote-anchor" href="#">
                                    Upvote
                                    <span class="count">0</span>
                                </a>
                            </span>
                            @*<span class="link">
                                    <a class="downvote-anchor" href="#">Downvote</a>
                                </span>*@
                            <span class="link comment-span">
                                <a class="comment-anchor" href="#">Comment</a>
                                <span class="comment-count"></span>
                            </span>
                        </div>

                        <div class="answer-comments col-md-11 no-right-padding">
                            <div class="comment-list hide">
                                <span class="comment-user"></span>
                                <span class="comment-date"></span>
                                <span class="comment-text"></span>
                            </div>
                            <div class="add-comment right">
                                <a href="#" class="anchor-add-comment add">Add Comment</a>
                            </div>
                            <div class="comment-box">                               
                                <a class="commentor" href="#">
                                    <img height="25" width="25" src="/Content/images/profile-image.jpg">
                                </a>                                
                                <div class="input-div no-right-padding">
                                    <input class="form-control input-sm txt_comment" id="commenttextbox" placeholder="Add comment" type="text" required>
                                </div>
                                <div class="col-md-3 buttons no-right-padding">
                                   @* <input type="button" class="btn btn-sm btn-primary btn-save-comment" id="btn_Save" value="Comment">*@
                                    <button type="submit" class="btn btn-sm btn-primary btn-save-comment">
                                        <i></i><span>Save</span>
                                    </button>
                                    <a href="#" class="anchor-cancel-comment">Cancel</a>
                                </div>                            
                                
                            </div>
                        </div>
                    </li>
                    @*</div>*@

                </ul>
            </div>

            <div class="alert alert-danger alert-dismissible col-md-10 col-md-offset-1" role="alert" style="display:none" id="errormessage">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Error!</strong>
            </div>
            <div class="wirte-answer col-md-12" style="margin-top:40px; display:none;">
                @*<textarea class="textarea" placeholder="Write your answer" style="width: 100%; height: 150px; font-size: 14px; line-height: 18px; padding: 10px 10px 10px 10px"></textarea>*@
                <div class="text-wrapper col-md-12">
                    <div class="toolbar-container">
                        <span class="ql-format-group">
                            <select title="Size" class="ql-size">
                                <option value="10px">Small</option>
                                <option value="13px" selected>Normal</option>
                                <option value="18px">Large</option>
                                <option value="32px">Huge</option>
                            </select>
                        </span>
                        <span class="ql-format-group"><span title="Bold" class="ql-format-button ql-bold"></span><span class="ql-format-separator"></span><span title="Italic" class="ql-format-button ql-italic"></span><span class="ql-format-separator"></span><span title="Underline" class="ql-format-button ql-underline"></span></span><span class="ql-format-group">
                            <select title="Text Color" class="ql-color">
                                <option value="rgb(0, 0, 0)" selected></option>
                                <option value="rgb(230, 0, 0)"></option>
                                <option value="rgb(255, 153, 0)"></option>
                                <option value="rgb(255, 255, 0)"></option>
                                <option value="rgb(0, 138, 0)"></option>
                                <option value="rgb(0, 102, 204)"></option>
                                <option value="rgb(153, 51, 255)"></option>
                                <option value="rgb(255, 255, 255)"></option>
                                <option value="rgb(250, 204, 204)"></option>
                                <option value="rgb(255, 235, 204)"></option>
                                <option value="rgb(255, 255, 204)"></option>
                                <option value="rgb(204, 232, 204)"></option>
                                <option value="rgb(204, 224, 245)"></option>
                                <option value="rgb(235, 214, 255)"></option>
                                <option value="rgb(187, 187, 187)"></option>
                                <option value="rgb(240, 102, 102)"></option>
                                <option value="rgb(255, 194, 102)"></option>
                                <option value="rgb(255, 255, 102)"></option>
                                <option value="rgb(102, 185, 102)"></option>
                                <option value="rgb(102, 163, 224)"></option>
                                <option value="rgb(194, 133, 255)"></option>
                                <option value="rgb(136, 136, 136)"></option>
                                <option value="rgb(161, 0, 0)"></option>
                                <option value="rgb(178, 107, 0)"></option>
                                <option value="rgb(178, 178, 0)"></option>
                                <option value="rgb(0, 97, 0)"></option>
                                <option value="rgb(0, 71, 178)"></option>
                                <option value="rgb(107, 36, 178)"></option>
                                <option value="rgb(68, 68, 68)"></option>
                                <option value="rgb(92, 0, 0)"></option>
                                <option value="rgb(102, 61, 0)"></option>
                                <option value="rgb(102, 102, 0)"></option>
                                <option value="rgb(0, 55, 0)"></option>
                                <option value="rgb(0, 41, 102)"></option>
                                <option value="rgb(61, 20, 102)"></option>
                            </select><span class="ql-format-separator"></span>
                            <select title="Background Color" class="ql-background">
                                <option value="rgb(0, 0, 0)"></option>
                                <option value="rgb(230, 0, 0)"></option>
                                <option value="rgb(255, 153, 0)"></option>
                                <option value="rgb(255, 255, 0)"></option>
                                <option value="rgb(0, 138, 0)"></option>
                                <option value="rgb(0, 102, 204)"></option>
                                <option value="rgb(153, 51, 255)"></option>
                                <option value="rgb(255, 255, 255)" selected></option>
                                <option value="rgb(250, 204, 204)"></option>
                                <option value="rgb(255, 235, 204)"></option>
                                <option value="rgb(255, 255, 204)"></option>
                                <option value="rgb(204, 232, 204)"></option>
                                <option value="rgb(204, 224, 245)"></option>
                                <option value="rgb(235, 214, 255)"></option>
                                <option value="rgb(187, 187, 187)"></option>
                                <option value="rgb(240, 102, 102)"></option>
                                <option value="rgb(255, 194, 102)"></option>
                                <option value="rgb(255, 255, 102)"></option>
                                <option value="rgb(102, 185, 102)"></option>
                                <option value="rgb(102, 163, 224)"></option>
                                <option value="rgb(194, 133, 255)"></option>
                                <option value="rgb(136, 136, 136)"></option>
                                <option value="rgb(161, 0, 0)"></option>
                                <option value="rgb(178, 107, 0)"></option>
                                <option value="rgb(178, 178, 0)"></option>
                                <option value="rgb(0, 97, 0)"></option>
                                <option value="rgb(0, 71, 178)"></option>
                                <option value="rgb(107, 36, 178)"></option>
                                <option value="rgb(68, 68, 68)"></option>
                                <option value="rgb(92, 0, 0)"></option>
                                <option value="rgb(102, 61, 0)"></option>
                                <option value="rgb(102, 102, 0)"></option>
                                <option value="rgb(0, 55, 0)"></option>
                                <option value="rgb(0, 41, 102)"></option>
                                <option value="rgb(61, 20, 102)"></option>
                            </select><span class="ql-format-separator"></span>

                        </span><span class="ql-format-group">
                            <span title="List" class="ql-format-button ql-list"></span>
                            <span class="ql-format-separator"></span>
                            <span title="Bullet" class="ql-format-button ql-bullet"></span>
                            <span class="ql-format-separator"></span>
                            <select title="Text Alignment" class="ql-align">
                                <option value="left" selected></option>
                                <option value="center"></option>
                                <option value="right"></option>
                                <option value="justify"></option>
                            </select>
                        </span>
                        <span class="ql-format-group">
                            <span title="Link" class="ql-format-button ql-link"></span>
                            <span class="ql-format-separator"></span>
                            <span title="Image" class="ql-format-button ql-image"></span>
                        </span>
                    </div>
                    <div class="editor-container"></div>
                </div>
                @*<a class="btn btn-primary btn-submit-answer btn-sm" style=" margin-top: 10px;">Submit Answer</a>*@
                <button type="submit" id="btn_Save" class="btn btn-primary btn-submit-answer btn-sm" style=" margin-top: 10px;">
                    <i></i><span>Submit Answer</span>
                </button>
            </div>

            <!--div to show Ask to Answer module-->
            <div class="well panel panel-default col-md-12" id="userToAnswer" style="margin-top:30px;padding-left:80px; display:none">
                <h4>Ask to Answer</h4>
                <div>
                    <form role="search">
                        <div class="form-group">
                            <input type="text" id="usernametext" class="form-control" placeholder="Search a specific user to answer your question" aria-describedby="sizing-addon3" style="width:90%">
                        </div>
                    </form>
                </div>
                <hr id="bigseparator" />
                <div id="userlistasktoanswer">

                </div>
                <!--div for loading message for the ask to answer module-->
                <div id="loadingasktoanswer">
                    <i class="fa fa-refresh fa-spin"></i><span> Loading....</span>
                </div>
            </div>
        </div>

    </div>
    <div class="col-md-4">
        <div class="tagCloud" style="margin-bottom:40px;">
            <h4>Related Questions</h4>
            <div class="list-group">
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
            </div>
        </div>
        <div class="tagCloud" style="margin-bottom:40px;">
            <h4>Hot Questions</h4>
            <div class="list-group">
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
                <a href="#" class="list-group">
                    <p class="list-group-item-heading">List group item heading</p>
                </a>
            </div>
        </div>
    </div>

</div>

