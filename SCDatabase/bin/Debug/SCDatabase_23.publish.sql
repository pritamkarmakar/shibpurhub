/*
Deployment script for SCCatalog

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar SCSqlServicePassword "G00dne$$01"
:setvar DatabaseName "SCCatalog"
:setvar DefaultFilePrefix "SCCatalog"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [SCSqlService]...';


GO
CREATE USER [SCSqlService] FOR LOGIN [SCSqlService];


GO
PRINT N'Creating [SCOwner]...';


GO
CREATE USER [SCOwner] WITHOUT LOGIN
    WITH DEFAULT_SCHEMA = [SCCatalog];


GO
PRINT N'Creating [SCCatalog]...';


GO
CREATE SCHEMA [SCCatalog]
    AUTHORIZATION [SCOwner];


GO
PRINT N'Creating [SCCatalog].[SCUser]...';


GO
CREATE TABLE [SCCatalog].[SCUser] (
    [UserId]         INT            IDENTITY (100, 1) NOT NULL,
    [Id]             NVARCHAR (50)  NOT NULL,
    [Password]       NVARCHAR (300) NOT NULL,
    [PGuid]          NVARCHAR (50)  NOT NULL,
    [IsDeleted]      BIT            NOT NULL,
    [CreateDatetime] DATETIME       NOT NULL,
    [UpdateDatetime] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[TicketCategoryMaster]...';


GO
CREATE TABLE [SCCatalog].[TicketCategoryMaster] (
    [CategoryId]           INT            IDENTITY (100, 1) NOT NULL,
    [Category_Description] NVARCHAR (100) NOT NULL,
    [CreateDatetime]       DATETIME       NOT NULL,
    [UpdateDatetime]       DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CategoryId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[TicketStatus]...';


GO
CREATE TABLE [SCCatalog].[TicketStatus] (
    [TicketStatusId]     INT           NOT NULL,
    [Status_Description] NVARCHAR (50) NOT NULL,
    [CreateDatetime]     DATETIME      NOT NULL,
    [UpdateDatetime]     DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([TicketStatusId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[Ticket]...';


GO
CREATE TABLE [SCCatalog].[Ticket] (
    [TicketId]        INT      NOT NULL,
    [CreatedByUserId] INT      NOT NULL,
    [TicketStatusId]  INT      NOT NULL,
    [CreateDatetime]  DATETIME NOT NULL,
    [UpdateDatetime]  DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([TicketId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[TicketCommentMapping]...';


GO
CREATE TABLE [SCCatalog].[TicketCommentMapping] (
    [TicketUserId]   INT            IDENTITY (1, 1) NOT NULL,
    [TicketId]       INT            NOT NULL,
    [UserId]         INT            NOT NULL,
    [Comment]        NVARCHAR (MAX) NOT NULL,
    [CreateDatetime] DATETIME       NOT NULL,
    [UpdateDatetime] DATETIME       NOT NULL,
    CONSTRAINT [PK_TicketCommentMapping] PRIMARY KEY CLUSTERED ([TicketUserId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[TicketCategoryMapping]...';


GO
CREATE TABLE [SCCatalog].[TicketCategoryMapping] (
    [TicketCategoryMappingId] INT      NOT NULL,
    [TicketId]                INT      NOT NULL,
    [CategoryId]              INT      NOT NULL,
    [CreateDatetime]          DATETIME NOT NULL,
    [UpdateDatetime]          DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([TicketCategoryMappingId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[UserProfile]...';


GO
CREATE TABLE [SCCatalog].[UserProfile] (
    [UserId]           INT            NOT NULL,
    [Legal_First_Name] NVARCHAR (100) NOT NULL,
    [Legal_last_Name]  NVARCHAR (100) NULL,
    [EmailAddress]     NVARCHAR (100) NOT NULL,
    [Address]          NVARCHAR (500) NULL,
    [PassoutBatch]     INT            NULL,
    [Dept]             NVARCHAR (50)  NULL,
    [CreateDatetime]   DATETIME       NOT NULL,
    [UpdateDatetime]   DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [SCCatalog].[FK_Ticket_User]...';


GO
ALTER TABLE [SCCatalog].[Ticket]
    ADD CONSTRAINT [FK_Ticket_User] FOREIGN KEY ([CreatedByUserId]) REFERENCES [SCCatalog].[SCUser] ([UserId]);


GO
PRINT N'Creating [SCCatalog].[FK_Ticket_TicketStatus]...';


GO
ALTER TABLE [SCCatalog].[Ticket]
    ADD CONSTRAINT [FK_Ticket_TicketStatus] FOREIGN KEY ([TicketStatusId]) REFERENCES [SCCatalog].[TicketStatus] ([TicketStatusId]);


GO
PRINT N'Creating [SCCatalog].[FK_TicketCommentMapping_User]...';


GO
ALTER TABLE [SCCatalog].[TicketCommentMapping]
    ADD CONSTRAINT [FK_TicketCommentMapping_User] FOREIGN KEY ([UserId]) REFERENCES [SCCatalog].[SCUser] ([UserId]);


GO
PRINT N'Creating [SCCatalog].[FK_TicketCommentMapping_Ticket]...';


GO
ALTER TABLE [SCCatalog].[TicketCommentMapping]
    ADD CONSTRAINT [FK_TicketCommentMapping_Ticket] FOREIGN KEY ([TicketId]) REFERENCES [SCCatalog].[Ticket] ([TicketId]);


GO
PRINT N'Creating [SCCatalog].[FK_TicketCategoryMapping_Ticket]...';


GO
ALTER TABLE [SCCatalog].[TicketCategoryMapping]
    ADD CONSTRAINT [FK_TicketCategoryMapping_Ticket] FOREIGN KEY ([TicketId]) REFERENCES [SCCatalog].[Ticket] ([TicketId]);


GO
PRINT N'Creating [SCCatalog].[FK_TicketCategoryMapping_Category]...';


GO
ALTER TABLE [SCCatalog].[TicketCategoryMapping]
    ADD CONSTRAINT [FK_TicketCategoryMapping_Category] FOREIGN KEY ([CategoryId]) REFERENCES [SCCatalog].[TicketCategoryMaster] ([CategoryId]);


GO
PRINT N'Creating [SCCatalog].[spUpsertUser]...';


GO
CREATE PROCEDURE [SCCatalog].[spUpsertUser]
	@UserID INT,
	@Id NVARCHAR(100),
	@Password NVARCHAR(100),
	@Fname NVARCHAR(100),
	@Lname NVARCHAR(100),
	@Address NVARCHAR(MAX),
	@EmailAddress NVARCHAR(500),
	@ErrorCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON
    BEGIN TRY
		IF (@UserID IS NULL)
		BEGIN
			--new user insert
			IF (@Id IS NULL)
			BEGIN
				SET @ErrorCode = 1
				RETURN @Errorcode
			END
			IF (@Password IS NULL)
			BEGIN
				SET @ErrorCode = 2
				RETURN @Errorcode
			END
			IF (@Fname IS NULL)
			BEGIN
				SET @ErrorCode = 3
				RETURN @Errorcode
			END
			IF (@EmailAddress IS NULL)
			BEGIN
				SET @ErrorCode = 4
				RETURN @Errorcode
			END

			INSERT INTO [SCCatalog].[SCUser]
           (
			   [Id],
			   [Password],
			   [IsDeleted],
			   [CreateDatetime],
			   [UpdateDatetime]
		   )
			VALUES
           (
			   @Id,
			   @Password,
			   0,
			   GETUTCDATE(),
			   GETUTCDATE()
		   )

		   INSERT INTO [SCCatalog].[UserProfile]
           (
			   [UserId],
			   [Legal_First_Name],
			   [Legal_last_Name],
			   [EmailAddress],
			   [Address],
			   [CreateDatetime],
			   [UpdateDatetime]
		   )
			VALUES
           (
			   @@IDENTITY,
			   @Fname,
			   @Lname,
			   @EmailAddress,
			   @Address,
			   GETUTCDATE(),
			   GETUTCDATE()
		   )
		END
		ELSE IF NOT EXISTS (SELECT 1 FROM SCCatalog.SCUser WHERE UserId = @UserID)
		BEGIN
			SET @ErrorCode = 5
			RETURN @ErrorCode
		END
		ELSE
		BEGIN
			--Update user
			IF (@Password IS NOT NULL)
			BEGIN
				UPDATE SCCatalog.SCUser SET [Password] = @Password, UpdateDatetime = GETUTCDATE() WHERE UserId = @UserID
				SET @ErrorCode = 0
				RETURN 0
			END
			UPDATE SCCatalog.UserProfile
				SET 
				Legal_First_Name = ISNULL(@Fname, Legal_First_Name),
				Legal_last_Name = ISNULL(@Lname, Legal_last_Name),
				[Address] = ISNULL(@Address, [Address]),
				EmailAddress = ISNULL(@EmailAddress, EmailAddress)
			WHERE UserId =@UserID
			SET @ErrorCode = 0
		END
	RETURN 0
	END TRY
  BEGIN CATCH
		-- Call the procedure to raise the original error.;
		RETURN -1		
   END CATCH
END
;
GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [SCOwner];


GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [SCSqlService];


GO
PRINT N'Creating Permission...';


GO
GRANT VIEW DEFINITION TO [SCSqlService];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[SCCatalog].[spUpsertUser] TO [SCSqlService]
    AS [SCOwner];


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fe507ee4-19f4-42ec-8a7a-352946d48a32')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fe507ee4-19f4-42ec-8a7a-352946d48a32')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5ebce0e0-e54e-41fc-a30c-027176642259')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5ebce0e0-e54e-41fc-a30c-027176642259')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c1be5710-9eb1-4fa5-89af-27afabc00955')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c1be5710-9eb1-4fa5-89af-27afabc00955')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '422f5e49-4003-4074-933b-7b16b6179702')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('422f5e49-4003-4074-933b-7b16b6179702')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7bf2dccb-9a9d-456a-8b6b-bd696d2e78eb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7bf2dccb-9a9d-456a-8b6b-bd696d2e78eb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '20ea204a-6ed6-4f55-b44f-832e527044bd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('20ea204a-6ed6-4f55-b44f-832e527044bd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7c02c9e0-b3cd-47d3-bf13-5f2a6548ee4c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7c02c9e0-b3cd-47d3-bf13-5f2a6548ee4c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '03eada00-a87d-4920-8b6f-69d880ecf8ff')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('03eada00-a87d-4920-8b6f-69d880ecf8ff')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e6644386-e674-432f-ac8e-e695c4bfcab2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e6644386-e674-432f-ac8e-e695c4bfcab2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '999847bd-6ea1-4617-94da-0bca497ebda2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('999847bd-6ea1-4617-94da-0bca497ebda2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c953b553-35fb-46cc-97a1-0247af1b61b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c953b553-35fb-46cc-97a1-0247af1b61b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '10d9fd12-74f0-493d-a431-4ecfc45c6302')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('10d9fd12-74f0-493d-a431-4ecfc45c6302')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '13036063-71d1-42ba-8147-1a090ff5d2b7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('13036063-71d1-42ba-8147-1a090ff5d2b7')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

PRINT N'******************************************************************************'
PRINT N'Populating valid values for Secreate question...'

DECLARE @CurrentDatetime datetime,
@TransactionIsOurs int

DECLARE @LoadValues TABLE 
(
	CategoryId INT,
	Category_Desc NVARCHAR(MAX),
	CreateDatetime Datetime,
	UpdateDatetime Datetime
)

BEGIN TRANSACTION
SET @CurrentDatetime = getutcdate()
SET @TransactionIsOurs = 1

INSERT INTO @LoadValues(QuestionId, Question, QuestionHint, CreateDatetime, UpdateDatetime)
Values
(1, 'Cat 1', @CurrentDatetime, @CurrentDatetime),
(2, 'Cat 2', @CurrentDatetime, @CurrentDatetime),
(3, 'Cat 3', @CurrentDatetime, @CurrentDatetime),
(4, 'Cat 4', @CurrentDatetime, @CurrentDatetime)

SET IDENTITY_INSERT [SCCatalog].[TicketCategoryMaster] ON
MERGE SCCatalog.TicketCategoryMaster TC
USING @LoadValues lv
ON (SM.Category_Desc = lv.Category_Desc)
WHEN MATCHED THEN
	UPDATE SET
	--SM.[QuestionId] = lv.QuestionId,
	--SM.[Question] = lv.Question,
	--SM.[QuestionHint] = lv.QuestionHint,
	TC.[CreateDatetime] = lv.CreateDatetime,
	TC.[UpdateDatetime] = lv.UpdateDatetime

WHEN NOT MATCHED BY TARGET THEN
	INSERT
	(
		[QuestionId],
		[Question],
		[QuestionHint],
		[CreateDatetime],
		[UpdateDatetime]
	)
	VALUES
	(
		lv.QuestionId,
		lv.Question,
		lv.QuestionHint,
		lv.CreateDatetime,
		lv.UpdateDatetime
	)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
OUTPUT $action,
inserted.QuestionId as AddedQuestionId,
deleted.QuestionId as deletedQuestionId;

SET IDENTITY_INSERT SCCatalog.TicketCategoryMaster OFF

IF @@ERROR <> 0 GOTO error_label

COMMIT TRANSACTION

SET @TransactionIsOurs = 0

error_label:
	IF @TransactionIsOurs = 1
	BEGIN
        RAISERROR(N'ERROR populating values TicketCategoryMaster table', 16, 1)
        ROLLBACK TRANSACTION
	END
GO


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
